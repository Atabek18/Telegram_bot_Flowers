from keyboards.reply.choise_reply_buttons import keyboards_reply
from keyboards.inline.choice_inline_buttons import inline_keyboards
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import text, italic, code
from handlers.uzb_users.for_run_inline1 import DL
from database.sqlite_db_user import CREATE_DB
from aiogram.dispatcher.filters import Text
from deep_translator import GoogleTranslator
from aiogram.dispatcher import FSMContext
from handlers.uzb_users import States
from datetime import datetime
from geopy import Nominatim
from loader import dp, bot
from aiogram import types
import sqlite3
import pytz
import pandas as pd

uzb_tz = pytz.timezone('Asia/Tashkent')
utc_now = datetime.utcnow()
uzb_now = utc_now.astimezone(uzb_tz)
current_time_tash = uzb_now.strftime('%Y-%m-%d %H:%M')

####################DB_CREATE_PLACE###################################
LOCATION_DB = CREATE_DB(db_file_name='flower.db', tabel_name='location_ident')
LOCATION_DB.ST_DB(
  values="""(id INTEGER PRIMARY KEY AUTOINCREMENT,user_id TEXT NOT NULL,
                            location_name TEXT NOT NULL, location_latitude TEXT NOT NULL,
                            location_longitude TEXT NOT NULL)""")

TRANSLATE_USER_LANG = CREATE_DB(db_file_name='flower.db',
                                tabel_name='translates_from_id')
TRANSLATE_USER_LANG.ST_DB(
  values="""(user_id INTEGER PRIMARY KEY,language TEXT NOT NULL)""")


@dp.message_handler(text='üá∫üáø O\'zbekcha')
async def to_Uzb(message: types.Message):
  conn, cursor = TRANSLATE_USER_LANG.qui_sql()
  cursor.execute(
    "UPDATE translates_from_id SET language = ? WHERE user_id = ?",
    ('uzb', int(message.chat.id)))
  conn.commit()
  dict_f = {'uzb': 'Bizning gul do\'konimizga xush kelibsiz'}
  cursor.execute(
    f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
  )
  select = cursor.fetchall()
  await message.answer(dict_f[select[0][0]],
                       reply_markup=keyboards_reply[select[0][0]]['start'])


@dp.message_handler(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π")
async def func_ru(message: types.Message):
  conn, cursor = TRANSLATE_USER_LANG.qui_sql()
  cursor.execute(
    "UPDATE translates_from_id SET language = ? WHERE user_id = ?",
    ('rus', int(message.chat.id)))
  conn.commit()
  dict_f = {'rus': '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤–∞—Å –Ω–∞ –Ω–∞—à–µ–º —Ü–≤–µ—Ç–æ—á–Ω–æ–º –º–∞–≥–∞–∑–∏–Ω–µ'}
  cursor.execute(
    f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
  )
  select = cursor.fetchall()
  await message.answer(dict_f[select[0][0]],
                       reply_markup=keyboards_reply[select[0][0]]['start'])


async def HELP_COMMEND():
  a = {
    'uzb': '/start Bosh menyuga o\'tish uchun deb yozing',
    'rus': '–í–≤–µ–¥–∏—Ç–µ /start, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
  }
  return a


@dp.message_handler(content_types=[
  types.ContentType.STICKER, types.ContentType.AUDIO,
  types.ContentType.STICKER, types.ContentType.UNKNOWN
])
async def unknown_message(msg: types.Message):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()

    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {msg.chat.id}")
    select = cursor.fetchall()

    message_text = text("Kechirasiz bot sizni tushunmadi," + '\U0001F914',
                        italic('\neslatib o\'tamiz,'), code('/help'),
                        'botni tushunishga yordam beradi')
    message_text1 = text("–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å" + '\U0001F914',
                         italic('\n–Ø –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–æ–º–Ω—é,'), '—á—Ç–æ –µ—Å—Ç—å',
                         code('–∫–æ–º–∞–Ω–¥–∞'), '/help')
    dict_f = {'rus': message_text1, 'uzb': message_text}
    await msg.reply(dict_f[select[0][0]], parse_mode=types.ParseMode.MARKDOWN)
  except:
    await msg.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
  conn, cursor = TRANSLATE_USER_LANG.qui_sql()
  try:
    cursor.execute(
      "INSERT INTO translates_from_id (user_id, language) VALUES (?,?)",
      (int(message.chat.id), 'uzb'))
  except:
    cursor.execute(
      "UPDATE translates_from_id SET language = ? WHERE user_id = ?",
      ('uzb', int(message.chat.id)))
  conn.commit()
  dict_f = {'uzb': 'üá∫üáø Tilni tanlang:\nüá∑üá∫ –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:'}
  cursor.execute(
    f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
  )
  select = cursor.fetchall()
  await message.answer(
    dict_f[select[0][0]],
    reply_markup=keyboards_reply[select[0][0]]['change_language_begin'])


@dp.message_handler(text=['üåπ Menyu', 'üåπ –ú–µ–Ω—é'])
async def MENU(message: types.Message):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    dict_f = {
      'uzb': 'Guldasta turini tanlang:',
      'rus': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é –≤–∞–º –≤–∏–¥ –±—É–∫–µ—Ç–∞'
    }
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()
    await message.answer(dict_f[select[0][0]],
                         reply_markup=keyboards_reply[select[0][0]]['Menu'])
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(
  Text([
    "ü•° Quti ko'rinishida", "üíê Guldasta ko'rinishida", 'ü•° –ë—É–∫–µ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ',
    'üíê –¶–≤–µ—Ç—ã –≤ –±—É–∫–µ—Ç–µ'
  ]))
async def Type_flowers(message_karobka_buket: types.Message,
                       state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    dict_f = {
      'uzb': 'Buyurtma miqdorini tanlang:',
      'rus': '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–µ—Ç–æ–≤:'
    }
    narx = inline_keyboards['uzb']['to_karobka'].inline_keyboard[1][
      0].callback_data.split(':')[-1]
    dict_f1 = {
      'uzb': f'Siz tanlagan gul: ü•° Quti ko\'rinishida\nNarxi: {narx} so\'m',
      'rus':
      f'–ë—É–∫–µ—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤—ã–±—Ä–∞–ª–∏:ü•° –ë—É–∫–µ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ\n\n–¶–µ–Ω–∞: {narx} —Å—É–º–º–æ–≤'
    }
    dict_f2 = {
      'uzb': 'Quydagilardan birini tanlang:',
      'rus': '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö:'
    }
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message_karobka_buket.chat.id}"
    )
    select = cursor.fetchall()

    if message_karobka_buket.text == 'ü•° Quti ko\'rinishida' or message_karobka_buket.text == 'ü•° –ë—É–∫–µ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ':
      await message_karobka_buket.answer(dict_f[select[0][0]],
                                         reply_markup=keyboards_reply)
      with open('imgs/K–æ—Ä–æ–±–∫a.jpg', 'rb') as photo_:
        await bot.send_photo(
          message_karobka_buket.chat.id,
          photo=photo_,
          caption=f'{dict_f1[select[0][0]]}',
          reply_markup=inline_keyboards[select[0][0]]['to_karobka'])

    elif message_karobka_buket.text == "üíê Guldasta ko'rinishida" or message_karobka_buket.text == "üíê –¶–≤–µ—Ç—ã –≤ –±—É–∫–µ—Ç–µ":
      await message_karobka_buket.answer(
        dict_f2[select[0][0]],
        reply_markup=keyboards_reply[select[0][0]]['Buket'])
  except:
    await message_karobka_buket.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(text=['üì≠ Buyurtma xozir kerak', 'üì≠ –î–æ—Å—Ç–∞–≤–∫–∞ –Ω—É–∂–Ω–∞ —Å–µ–π—á–∞—Å'])
async def xozir(message_xozir: types.Message):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    dict_f = {
      'uzb':
      '90 daqiqa ichida yetkazib beriladi\nYetkazib berish uchun geolokatsiyangizni ulashing',
      'rus':
      '–î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 90 –º–∏–Ω—É—Ç\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–µ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏'
    }
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message_xozir.chat.id}"
    )
    select = cursor.fetchall()
    await message_xozir.answer(
      dict_f[select[0][0]],
      reply_markup=keyboards_reply[select[0][0]]['location'])

    conn1 = sqlite3.connect('flower.db')
    cursor1 = conn1.cursor()
    cursor1.execute(
      "UPDATE shopping SET zakaz_qilingan_vaqti = ? WHERE user_id = ? AND is_fulfilled = ?",
      ('xozir', message_xozir.chat.id, 'No'))
    conn1.commit()
  except:
    await message_xozir.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


need = str(datetime.now()).split('-')
current_time = uzb_now.strftime('%m.%d.%H')


@dp.message_handler(
  text=['‚è± Buyurtma vaqtini yozish', '‚è± –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏'])
async def Buyurtma_vaqti(message_keying: types.Message, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    dict_f = {
      'uzb':
      f'Buyurtmangizni yetkazma vaqtini quyidagi formatda yozing: Oy-Sana-Soat: {current_time}',
      'rus':
      f'–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ: –ú–µ—Å—è—Ü-–î–∞—Ç–∞-–ß–∞—Å: {current_time}'
    }
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message_keying.chat.id}"
    )
    select = cursor.fetchall()
    await message_keying.answer(
      dict_f[select[0][0]],
      reply_markup=keyboards_reply[select[0][0]]['cancel'])
    await States.Buyurtma_vaqt_state.start_vaqt.set()
  except:
    await message_keying.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(state=States.Buyurtma_vaqt_state.start_vaqt)
async def start_typing_time(message: types.Message, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    dict_f = {
      'uzb': 'Buyurtmani qabul qilish uchun sizga mos vaqtni tanlang',
      'rus': '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤–∞–º –≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞'
    }
    dict_f1 = {
      'uzb':
      'Guldastaga buyurtma berish uchun bizga geolokatsiyangizni yuboring',
      'rus': '–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –±—É–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é'
    }
    dict_f2 = {
      'uzb':
      f'Siz kiritgan vaqt to\'g\'ri emas\n\nIltimos yetkazib bermoqchi bo\'lgan vaqtingizni\nQuyidagi formatda kiriting: Oy.Sana.Soat:{current_time}',
      'rus':
      f'–í—Ä–µ–º—è –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –≤–≤–µ–ª–∏ –±—ã–ª–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω–æ\n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏\n–ü—Ä–∏–º–µ–Ω–æ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: –º–µ—Å—è—Ü.–¥–µ–Ω—å.–≤—Ä–µ–º—è: {current_time}'
    }
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()

    if message.text == '‚¨Ö Ortga' or message.text == '‚¨Ö –ù–∞–∑–∞–¥':
      await message.answer(
        dict_f[select[0][0]],
        reply_markup=keyboards_reply[select[0][0]]['Buyurtmalar'])
      await state.finish()
    else:
      check_it_time = message.text.split('.')
      date_format = '%Y-%m-%d-%H'
      try:
        date_time_obj = datetime.strptime(
          str(datetime.now().year) + '-' + "-".join(message.text.split('.')),
          date_format)
        if len(check_it_time) == 3:
          await message.answer(
            dict_f1[select[0][0]],
            reply_markup=keyboards_reply[select[0][0]]['location'])
          base = sqlite3.connect('flower.db')
          curr = base.cursor()
          curr.execute(
            "UPDATE shopping SET zakaz_qilingan_vaqti = ? WHERE user_id = ? AND is_fulfilled = ?",
            (date_time_obj, message.chat.id, 'No'))
          base.commit()
          await state.finish()
        else:
          await message.answer(dict_f2[select[0][0]])
      except:
        await message.answer(dict_f2[select[0][0]])
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(commands=["help"])
async def healper_func(message: types.Message):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()
    await message.answer(text=HELP_COMMEND()[select[0][0]], parse_mode='HTML')
  except:
    await message.reply('Iltimos, botni qaytadan boshlang /start')


@dp.message_handler(text=['üó∫ Mening manzillarim', 'üó∫ –ú–æ–∏ –∞–¥—Ä–µ—Å–∞'])
async def Sended_Locations(message: types.Message, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    dict_f = {
      'uzb': "Bizda mavjud bo'lgan sizning manzillaringiz",
      'rus': '–í–∞—à–∏ –∞–¥—Ä–µ—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ —É –Ω–∞—Å –µ—Å—Ç—å'
    }
    dict_f1 = {
      'uzb':
      'Xozircha bizda manzilingiz mavjud emas, geolokatsiyangizni ulashing',
      'rus':
      '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞—Ü–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é'
    }
    dict_back = {'uzb': '‚¨Ö Ortga', 'rus': '‚¨Ö –ù–∞–∑–∞–¥'}
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()

    conn1 = sqlite3.connect('flower.db')
    cursor1 = conn1.cursor()
    cursor1.execute(
      f"""SELECT location_name FROM location_ident WHERE user_id=={message.chat.id}"""
    )
    query = cursor1.fetchall()
    if query:
      my_loc = ReplyKeyboardMarkup(resize_keyboard=True)
      for i in set(query):
        my_loc.add(KeyboardButton(text=i[0]))
      my_loc.add(KeyboardButton(text=dict_back[select[0][0]]))
      try:
        await bot.edit_message_reply_markup(chat_id=message.chat.id,
                                            message_id=message.message_id,
                                            reply_markup=my_loc)
      except:
        await message.answer(dict_f[select[0][0]], reply_markup=my_loc)
      await States.State_Loc.your_loc.set()
    else:
      await message.answer(dict_f1[select[0][0]])
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(state=States.State_Loc.your_loc)
async def my_loc(message: types.Message, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()
    dict_f = {
      'uzb': 'Balki qayta urinib ko\'rarsiz',
      'rus': '–ú–æ–∂–µ—Ç –±—ã—Ç—å –ø–æ–ø—Ä–æ–±—É–µ—Ç–µ –µ—â–µ?'
    }
    dict_f1 = {
      'uzb': 'Aloqa uchun telefon raqamingizni ulashing',
      'rus': '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º'
    }
    dict_f2 = {
      'uzb': 'Bot sizni tushunmadi',
      'rus': '–ë–æ—Ç –Ω–µ —Å–æ–≤—Å–µ–º –≤–∞—Å –ø–æ–Ω—è–ª –≤–∞—Å'
    }

    conn1 = sqlite3.connect('flower.db')
    cursor1 = conn1.cursor()
    cursor1.execute(
      f"""SELECT location_name FROM location_ident WHERE user_id=={message.chat.id}"""
    )
    query = cursor1.fetchall()
    cursor11 = conn1.cursor()
    cursor11.execute(
      f"SELECT location_name, location_latitude, location_longitude FROM location_ident WHERE user_id=={message.chat.id}"
    )
    query1 = cursor11.fetchall()
    if message.text == '‚¨Ö Ortga' or message.text == '‚¨Ö –ù–∞–∑–∞–¥':
      await message.answer(
        dict_f[select[0][0]],
        reply_markup=keyboards_reply[select[0][0]]['Buyurtmalar'])
    elif (message.text, ) in query and message.text:
      for i in query1:
        if message.text in i:
          base, curr = DL.qui_sql()
          curr.execute(
            "UPDATE shopping SET location_name = ?, location_latitude = ?, location_longitude = ? WHERE user_id = ? AND is_fulfilled = ?",
            (i[0], i[1], i[2], message.chat.id, 'No'))
          base.commit()
          await message.answer(
            dict_f1[select[0][0]],
            reply_markup=keyboards_reply[select[0][0]]['Contact'])
          break
    else:
      await message.answer(
        dict_f2[select[0][0]],
        reply_markup=keyboards_reply[select[0][0]]['location'])
    await state.finish()
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(content_types=types.ContentType.CONTACT)
async def handle_contact(message, state: FSMContext):
  try:

    phone_number = message.contact.phone_number if message.contact and message.contact.phone_number else None
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()

    dict_f2 = {
      'uzb': "Sizning ma'lumotlaringiz to'g'ri yozilib olindimi?",
      'rus': '–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã?'
    }
    dict_f1 = {
      'uzb': 'Siz bilan bog\'lanishimiz uchun aloqa raqamingizni yuboring',
      'rus': '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –º—ã —Å–≤—è–∑–∞–ª–∏—Å—å —Å –≤–∞–º–∏'
    }

    if phone_number:

      conn1 = sqlite3.connect('flower.db')
      cursor1 = conn1.cursor()
      cursor1.execute(
        "UPDATE shopping SET contact = ? WHERE user_id = ? AND is_fulfilled = ?",
        (message.contact.phone_number, message.chat.id, 'No'))
      conn1.commit()
      cursor1.execute(
        "SELECT * FROM shopping WHERE user_id = ? AND is_fulfilled = ?",
        (str(message.chat.id), 'No'))
      for i in cursor1.fetchall():

        df_xozir = {
          "uzb": {
            "Buyurtmangiz:": i[4],
            "Nechtaligi:": i[5],
            "Guldastangiz yozuvi:": i[7],
            "Telefon raqamingiz:": i[9],
            "Buyurtmangiz manzili:": i[12],
            "Buyurtma vaqti:": 'xozir'
          },
          "rus": {
            "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:":
            i[4].split("-")[0] if i[4] != "Qutili" else "–ë—É–∫–µ—Ç –≤ –∫–æ—Ä–æ–±–∫–µ",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:":
            i[5],
            "–ù–∞–¥–ø–∏—Å—å –Ω–∞ –±—É–∫–µ—Ç–µ:":
            i[7] if i[7] != 'yoziqsiz' else "–ë–µ–∑ –Ω–∞–¥–ø–∏—Å–∏",
            "–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–æ–º–µ—Ä:":
            i[9],
            "–ú–µ—Å—Ç–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:":
            GoogleTranslator(source='uz', target='ru').translate(i[12]),
            "–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:":
            '–°–µ–π—á–∞—Å' if i[10] == 'xozir' else i[10]
          }
        }

        df_now = pd.DataFrame(df_xozir[select[0][0]], index=[0]).transpose()
        df_now.columns = [" "]
        await message.answer(
          dict_f2[select[0][0]],
          reply_markup=keyboards_reply[select[0][0]]['last_agree'])
        await message.answer(df_now)

    else:
      await message.answer(dict_f1[select[0][0]])

    await States.Agree.yes_or_no.set()

  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(text=["‚ùå Yo'q", "‚ùå –ù–µ—Ç"], state=States.Agree.yes_or_no)
async def last_process_no(message: types.Message, state: FSMContext):
  conn, cursor = TRANSLATE_USER_LANG.qui_sql()
  cursor.execute(
    f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
  )
  select = cursor.fetchall()
  try_again = {
    'uzb': 'Qaytadan buyurtma berishingizni so\'raymiz',
    'rus': '–ü—Ä–æ—Å–∏–º –≤–∞—Å –∑–∞–∫–∞–∑–∞—Ç—å –∑–∞–Ω–æ–≤–æ'
  }

  try:
    await message.answer(try_again[select[0][0]],
                         reply_markup=keyboards_reply[select[0][0]]['start'])
    await state.finish()

  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(text=['‚úÖ Ha', '‚úÖ –î–∞'], state=States.Agree.yes_or_no)
async def last_process_yes(message: types.Message, state: FSMContext):
  conn, cursor = TRANSLATE_USER_LANG.qui_sql()
  cursor.execute(
    f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
  )
  select = cursor.fetchall()
  dict_f = {
    'uzb':
    'Buyurtma qilganingiz uchun rahmat,\nYaqin orada siz bilan bog\'lanishadi',
    'rus': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, –í —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è'
  }
  try:
    db = sqlite3.connect("flower.db")
    cursor = db.cursor()
    cursor.execute(
      "UPDATE shopping SET is_fulfilled = ?, order_time = ? WHERE user_id = ? AND is_fulfilled = ?",
      ('Yes', current_time_tash, message.chat.id, 'No'))
    db.commit()
    db.close()
    await message.answer(dict_f[select[0][0]],
                         reply_markup=keyboards_reply[select[0][0]]['start'])
    await state.finish()
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(content_types=types.ContentType.LOCATION)
async def handle_location(message, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()

    geolocator = Nominatim(user_agent="my_bot")
    location_latitude = message.location.latitude if message.location and message.location.latitude else None
    location_longitude = message.location.longitude if location_latitude else None
    loc = geolocator.reverse(f"{location_latitude}, {location_longitude}",
                             timeout=10) if location_latitude else None
    location_name = ' '.join(
      loc.address.split(" ")[::-1][:1] +
      loc.address.split(" ")[::-1][2:]) if location_latitude else None
    try:
      translated_location = GoogleTranslator(
        source='uz', target='ru').translate(location_name)
    except:
      translated_location = location_name
    dict_f = {
      'uzb': f"Siz jo'natgan manzil:{location_name} To'grimi?",
      'rus': f'–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {translated_location} –ü—Ä–∞–≤–∏–ª—å–Ω–æ?'
    }
    await message.answer(
      dict_f[select[0][0]],
      reply_markup=keyboards_reply[select[0][0]]['YES_OR_NO_FOR_LOCATION'])
    address = loc.raw['address']
    city_or_state = address.get('state', '') if address.get(
      'state', '') else address.get('city', '')
    async with state.proxy() as data:
      country = address.get('country', '')
      if country == 'O ªzbekiston':
        if city_or_state == 'Toshkent':
          data['location'] = location_name
        else:
          data['location'] = 'ishlamadi'
      data['loc_name'] = location_name
      data['loc_long'] = location_longitude
      data['loc_lati'] = location_latitude
    await States.Check_it_your.yes_no.set()
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(state=States.Check_it_your.yes_no)
async def Maybe(msg, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {msg.chat.id}")
    select = cursor.fetchall()

    dict_f = {
      'uzb':
      'Buyurtmani qabul qilib oladigan joyingiz yozib olindi,\nAloqa uchun nomeringizni qoldiring: üìû',
      'rus':
      '–í–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n–¢–µ–ø–µ—Ä—å –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ –Ω–µ–æ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç: üìû'
    }
    dict_f1 = {
      'uzb':
      "Kechirasiz, sizning manzilingiz bo'yicha yetkazib berish xizmati mavjud emas, xozircha faqat Toshkent bo'yicha",
      'rus':
      '–ò–∑–≤–µ–Ω–∏—Ç–µ –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è —É –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –∫—Ä–æ–º–µ –≥–æ—Ä–æ–¥–∞ –¢–∞—à–∫–µ–Ω—Ç'
    }
    dict_f2 = {
      'uzb': "üìç Yetkazib berish manzilingizni qayta yuboring",
      'rus': 'üìç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–Ω–æ–≤–æ'
    }
    dict_f3 = {
      'uzb': "üìç Yetkazib berish manzilingizni qayta yuboring",
      'rus': 'üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–Ω–æ–≤–æ'
    }
    dict_f4 = {'uzb': 'Bot buni tushunmadi', 'rus': '–ë–æ—Ç —ç—Ç–æ–≥–æ –Ω–µ –ø–æ–Ω—è–ª'}

    async with state.proxy() as data:
      if msg.text == '‚úÖ Ha' or msg.text == '‚úÖ –î–∞':
        if data['location'] != 'ishlamadi':
          await msg.answer(
            dict_f[select[0][0]],
            reply_markup=keyboards_reply[select[0][0]]['Contact'])
          await LOCATION_DB.ADD_DB(
            values=(msg.chat.id, data['loc_name'], data['loc_lati'],
                    data['loc_long']),
            str_v=
            '(user_id, location_name, location_latitude, location_longitude)',
            how_many_values='(?,?,?,?)')
          base, curr = DL.qui_sql()
          curr.execute(
            "UPDATE shopping SET location_name = ?, location_latitude = ?, location_longitude = ? WHERE user_id = ? AND is_fulfilled = ?",
            (data['loc_name'], data['loc_lati'], data['loc_long'], msg.chat.id,
             'No'))
          base.commit()
          base.close()
        else:
          await msg.answer(
            dict_f1[select[0][0]],
            reply_markup=keyboards_reply[select[0][0]]['location'])
      elif msg.text == '‚ùå Yo\'q' or msg.text == '‚ùå –ù–µ—Ç':
        await msg.answer(
          dict_f2[select[0][0]],
          reply_markup=keyboards_reply[select[0][0]]['location'])
      elif msg.text == '‚¨Ö Ortga' or msg.text == '‚¨Ö –ù–∞–∑–∞–¥':
        await msg.answer(dict_f3[select[0][0]],
                         reply_markup=keyboards_reply[select[0][0]]['Keyin'])
      else:
        await msg.answer(dict_f4[select[0][0]],
                         reply_markup=keyboards_reply[select[0][0]]['Keyin'])
      await state.finish()
  except:
    await msg.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(text=['‚öôÔ∏è Sozlamalar', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'])
async def settings(message: types.Message):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()
    dict_f = {'uzb': 'Harakatni tanlang', 'rus': '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:'}
    await message.answer(
      dict_f[select[0][0]],
      reply_markup=keyboards_reply[select[0][0]]['sozlamalar'])
    await States.Translate.uzb_ru.set()
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )


@dp.message_handler(state=States.Translate.uzb_ru)
async def choose_language(message: types.Message, state: FSMContext):
  try:
    conn, cursor = TRANSLATE_USER_LANG.qui_sql()
    cursor.execute(
      f"SELECT language FROM translates_from_id WHERE user_id = {message.chat.id}"
    )
    select = cursor.fetchall()
    dict_f = {'uzb': 'Quyidagilardan birini tanlang', 'rus': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:'}
    dict_f1 = {'uzb': 'Tilni tanlang', 'rus': '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'}

    if message.text == '‚¨Ö Ortga' or message.text == '‚¨Ö –ù–∞–∑–∞–¥':
      await message.answer(dict_f[select[0][0]],
                           reply_markup=keyboards_reply[select[0][0]]['start'])
    else:
      await message.answer(
        dict_f1[select[0][0]],
        reply_markup=keyboards_reply[select[0][0]]['change_language'])
    await state.finish()
  except:
    await message.reply(
      "üá∫üáø Botimiz yangilangaligi tufayli /start buyruqi orqali ishga tushuring\n\nüá∑üá∫ –í —Å–≤—è–∑–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –±–æ—Ç–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç –∫–æ–º–º–∞–Ω–¥–æ–π /start"
    )
